mybatis:
  mapper-locations: classpath*:/mapper/*.xml
server:
  port: 8899
spring:
  application:
    name: halo-shardingjdbc-app
  shardingsphere:
    datasource:
      ds0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: 123456
        type: org.apache.commons.dbcp2.BasicDataSource
        url: jdbc:mysql://192.168.189.1:3306/halo_db_0?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
        username: root
      ds1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: 123456
        type: org.apache.commons.dbcp2.BasicDataSource
        url: jdbc:mysql://192.168.189.1:3306/halo_db_1?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
        username: root
      ds2:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: 123456
        type: org.apache.commons.dbcp2.BasicDataSource
        url: jdbc:mysql://192.168.189.1:3306/halo_db_2?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
        username: root
      names: ds0,ds1,ds2
    props:
      sql:
        show: true
    sharding:
      #            defaultTableStrategy:
      #                none:
      #分库策略
      default-database-strategy:
        inline:
          algorithm-expression: ds$->{id % 3}
          sharding-column: id
      tables:
        #分表策略，采用默认规则
        t_user:
          actual-data-nodes: ds$->{0..2}.t_user_$->{0..2}
          key-generator:
            column: id
            type: SNOWFLAKE
          table-strategy:
            inline:
              algorithm-expression: t_user_$->{id % 3}
              sharding-column: id
        #分表策略，采用强制路由
        t_deptment:
          actual-data-nodes: ds$->{0..2}.t_deptment_$->{0..2}
          key-generator:
            column: id
            type: SNOWFLAKE
#          databaseStrategy:
#            hint:
#              #部门分库策略
#              algorithmClassName: com.halo.shardingjdbc.algorithm.HaloHintDataBaseAlgorithm
          table-strategy:
#            hint:
#              #部门分表策略
#              algorithmClassName: com.halo.shardingjdbc.algorithm.HaloHintTableAlgorithm
            inline:
                algorithm-expression: t_deptment_$->{id % 3}
                sharding-column: id

  cloud:
    nacos:
      # Nacos 作为注册中心的配置项，对应 NacosDiscoveryProperties 配置类
      discovery:
        server-addr: 192.168.189.133:8848 # Nacos 服务器地址
        group: ${spring.application.name}-group

seata:
  application-id: ${spring.application.name} # Seata 应用名称，默认使用 ${spring.application.name}
  tx-service-group: default # Seata 事务组, 高版本没找到相关配置, 是否可配置未知 选用默认default
  # 服务配置项
  service:
    # 虚拟组和分组的映射 1.0.0以上好像将vgroup-mapping 改为 vgroupMapping, 此处是否影响未测试
    vgroupMapping:
      # 此处Key对应 tx-service-group 的 Value, 此处 value 默认 default
      default: default
    # 分组和 Seata 服务的映射 默认端口8091
    grouplist:
      default: 192.168.189.133:8091